# @configure_input@

# individual test makefile template

# The file definitions. This include must occur before targets.
EXE_FILE=$(shell echo ${PWD} | sed 's,.*/,,')
SRC_FILE=$(EXE_FILE).f90
OBJ_FILE=${SRC_FILE:.f90=.o}

# The test type (e.g. forward, k_matrix, etc)
TEST_TYPE=`dirname ${PWD} | sed 's,.*/,,'`

# Tool-specific substitution variables
FC      = @FC@
FCFLAGS = @FCFLAGS@ -I../../incsrc
LDFLAGS = @LDFLAGS@
LIBS    = @LIBS@

# The targets
all: $(EXE_FILE)

$(OBJ_FILE): $(SRC_FILE)

$(EXE_FILE): $(OBJ_FILE)
	@echo; echo; \
	echo "=============================================="; \
	echo "Building $(TEST_TYPE) $(EXE_FILE) using:"; \
	echo "  FC      : $(FC)"; \
	echo "  FCFLAGS : $(FCFLAGS)"; \
	echo "  LDFLAGS : $(LDFLAGS)"; \
	echo "=============================================="
	$(FC) $(LDFLAGS) $(OBJ_FILE) -o $(EXE_FILE) $(LIBS)

clean:
	@echo; echo; \
	echo "=============================================="; \
	echo "Cleaning up $(TEST_TYPE) $(EXE_FILE)"; \
	echo "=============================================="
	rm -fr $(OBJ_FILE) $(EXE_FILE) gmon.out *.output *.bin results/*.signal

update:
	@update() \
	{ files=`find . -maxdepth 1 -name "$$1" -print`; \
	  if [ -n "$$files" ]; then \
	    mv $$files results; \
	  else \
	    echo "No $$1 files to update."; \
	  fi \
	}; \
	echo; echo; \
	echo "=============================================="; \
	echo "Updating results for $(TEST_TYPE) $(EXE_FILE)"; \
	echo "=============================================="; \
	update "*.output"; update "*.bin"

realclean: clean
	-rm Makefile

# Specify targets that do not generate filesystem objects
.PHONY: all clean update realclean

# Specify suffix rules
.SUFFIXES: .f90 .o
.f90.o:
	@$(FC) $(FCFLAGS) -c $<
